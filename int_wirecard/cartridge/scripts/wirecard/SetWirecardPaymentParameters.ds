/**
 * Shop System Plugins - Terms of use 
 * 
 * This terms of use regulates warranty and liability between Wirecard Central Eastern Europe 
 * (subsequently referred to as WDCEE) and it's contractual partners partners
 * (subsequently referred to as customer or customers) which are related to the use of plugins 
 * provided by WDCEE. The Plugin is provided provided by WDCEE free of charge for it's customers 
 * and must be used for the purpose of WDCEE's payment platform platform integration only. 
 * It explicitly is not part of the general contract between WDCEE and it's customer. The plugin 
 * has successfully been tested under specific circumstances which are are defined as the shopsystem's 
 * standard configuration (vendor's delivery state). The Customer is responsible for testing the plugin's 
 * functionality before putting it into production enviroment. The customer uses the the plugin 
 * at own risk. WDCEE does not guarantee it's full functionality neither does WDCEE assume liability 
 * for any disadvantage related to the use use of this plugin. 
 * By installing the plugin into the shopsystem the customer agrees to the terms of use. 
 * Please do not use this plugin if you do not agree to the terms of use !
 *
 * This script maps all Wirecard parameters to the Demandware business objects and stores them
 * at the payment transaction or payment instrument. Basic parameters are set for all incoming
 * payment methods, other parameters are only set for specific payment types.
 *
 * @input Parameters : dw.web.HttpParameterMap - the current http parameter map
 * @input PaymentInstrument : dw.order.OrderPaymentInstrument - the payment instrument which should be updated
 * @input Order : dw.order.Order - the order which needs to be updated
 */
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.web );

importScript("int_wirecard:wirecard/libLogger.ds");

function execute( args : PipelineDictionary ) : Number
{
	var parameters : HttpParameterMap = args.Parameters;
	var order : Order = args.Order;
	var paymentInstrument : PaymentInstrument = args.PaymentInstrument;
	var paymentTransaction : PaymentTransaction = paymentInstrument.paymentTransaction;
	
	WirecardLogger.logWarn("SetWirecardPaymentParameters.ds: Set all payment parameters to Order " + order.orderNo);
	
	// Map and set the basic parameters
	paymentTransaction.custom.wirecardFinancialInstitution = parameters.get("financialInstitution").submitted ? parameters.get("financialInstitution").value : "";
	paymentTransaction.custom.wirecardGatewayReferenceNumber = parameters.get("gatewayReferenceNumber").submitted ? parameters.get("gatewayReferenceNumber").value : "";
	paymentTransaction.custom.wirecardGatewayContractNumber = parameters.get("gatewayContractNumber").submitted ? parameters.get("gatewayContractNumber").value : "";
	paymentTransaction.custom.wirecardPaymentState = parameters.get("paymentState").submitted ? parameters.get("paymentState").value : "";
	
	var paymentType : String = parameters.get("paymentType").submitted ? parameters.get("paymentType").value : "";
	paymentTransaction.custom.wirecardPaymentType = paymentType;
	
	// Switch by payment type, map parameters and save at the payment
	// Note that this list can be enhanced according to your needs
	switch (paymentType) {
		
		case "CCARD":
			paymentTransaction.custom.wirecardMaskedPan = parameters.get("maskedPan").submitted ? parameters.get("maskedPan").value : "";
		
			if (parameters.get("financialInstitution").submitted) {
				paymentInstrument.setCreditCardType(parameters.get("financialInstitution").value);
			}
			
			if (parameters.get("cardholder").submitted) {
				paymentInstrument.setCreditCardHolder(parameters.get("cardholder").value);
			}
			
			if (parameters.get("expiry").submitted) {
				var expiry = parameters.get("expiry").value.split("/");
				paymentInstrument.setCreditCardExpirationMonth(parseInt(expiry[0]));
				paymentInstrument.setCreditCardExpirationYear(parseInt(expiry[1]));
			}
			break;

		case "IDL":
			
			paymentTransaction.custom.wirecardIdealConsumerName = parameters.get("idealConsumerName").submitted ? parameters.get("idealConsumerName").value : "";
			paymentTransaction.custom.wirecardIdealConsumerAccountNumber = parameters.get("idealConsumerAccountNumber").submitted ? parameters.get("idealConsumerAccountNumber").value : "";
			paymentTransaction.custom.wirecardIdealConsumerCity = parameters.get("idealConsumerCity").submitted ? parameters.get("idealConsumerCity").value : "";
			
			break;
		
		case "PAYPAL":
			
			paymentTransaction.custom.wirecardPaypalPayerId = parameters.get("paypalPayerID").submitted ? parameters.get("paypalPayerID").value : "";
			paymentTransaction.custom.wirecardPaypalPayerEmail = parameters.get("paypalPayerEmail").submitted ? parameters.get("paypalPayerEmail").value : "";
			paymentTransaction.custom.wirecardPaypalPayerLastName = parameters.get("paypalPayerLastName").submitted ? parameters.get("paypalPayerLastName").value : "";
			paymentTransaction.custom.wirecardPaypalPayerFirstName = parameters.get("paypalPayerFirstName").submitted ? parameters.get("paypalPayerFirstName").value : "";
			
			if (PaymentMgr.getPaymentMethod(paymentInstrument.getPaymentMethod()).custom.wirecardUpdateShippingData) {
			
				var shippingAddress : OrderAddress = order.defaultShipment.shippingAddress;		
				
				if (parameters.get("paypalPayerAddressName").submitted) {
					// This is a bit of guessing, but PayPal returns only one name parameter, 
					// so we split it at the first whitespace
					var name : Array = parameters.get("paypalPayerAddressName").value.split(" ", 2);
					if (name.length > 1) {
						shippingAddress.setFirstName(name[0]);
						shippingAddress.setLastName(name[1]);
					}
					else {
						// We don't touch the first name entered during checkout in this case
						shippingAddress.setLastName(name[0]);
					}
				}
				
				if (parameters.get("paypalPayerAddressCountry").submitted) {
					shippingAddress.setCountryCode(parameters.get("paypalPayerAddressCountry").value);
				}
		
				if (parameters.get("paypalPayerAddressCity").submitted) {
					shippingAddress.setCity(parameters.get("paypalPayerAddressCity").value);
				}				
		
				if (parameters.get("paypalPayerAddressState").submitted) {
					shippingAddress.setStateCode(parameters.get("paypalPayerAddressState").value);
				}
		
				if (parameters.get("paypalPayerAddressStreet1").submitted) {
					shippingAddress.setAddress1(parameters.get("paypalPayerAddressStreet1").value);
				}
			
				if (parameters.get("paypalPayerAddressStreet2").submitted) {
					shippingAddress.setAddress2(parameters.get("paypalPayerAddressStreet2").value);
				}	
				
				if (parameters.get("paypalPayerAddressZIP").submitted) {
					shippingAddress.setPostalCode(parameters.get("paypalPayerAddressZIP").value);
				}	
			}			
			
			break;
			
		case "SOFORTUEBERWEISUNG":
		
			paymentTransaction.custom.wirecardSenderAccountNumber =  parameters.get("senderAccountNumber").submitted ? parameters.get("senderAccountNumber").value : "";
			paymentTransaction.custom.wirecardSenderAccountOwner = parameters.get("senderAccountOwner").submitted ? parameters.get("senderAccountOwner").value : "";
			paymentTransaction.custom.wirecardSenderBankNumber = parameters.get("senderBankNumber").submitted ? parameters.get("senderBankNumber").value : "";
			paymentTransaction.custom.wirecardSenderBankName = parameters.get("senderBankName").submitted ? parameters.get("senderBankName").value : "";
			paymentTransaction.custom.wirecardSenderBIC = parameters.get("senderBIC").submitted ? parameters.get("senderBIC").value : "";
			paymentTransaction.custom.wirecardSenderIBAN = parameters.get("senderIBAN").submitted ? parameters.get("senderIBAN").value : "";
			paymentTransaction.custom.wirecardSenderCountry = parameters.get("senderCountry").submitted ? parameters.get("senderCountry").value : "";
			paymentTransaction.custom.wirecardSecurityCriteria = parameters.get("securityCriteria").submitted ? parameters.get("securityCriteria").value : "";
		
			break;
			
		default:
		
			break
	}
	
    return PIPELET_NEXT;
}
