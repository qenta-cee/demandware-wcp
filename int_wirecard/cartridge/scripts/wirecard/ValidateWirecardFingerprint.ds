/**
 * Shop System Plugins - Terms of use 
 * 
 * This terms of use regulates warranty and liability between Wirecard Central Eastern Europe 
 * (subsequently referred to as WDCEE) and it's contractual partners partners
 * (subsequently referred to as customer or customers) which are related to the use of plugins 
 * provided by WDCEE. The Plugin is provided provided by WDCEE free of charge for it's customers 
 * and must be used for the purpose of WDCEE's payment platform platform integration only. 
 * It explicitly is not part of the general contract between WDCEE and it's customer. The plugin 
 * has successfully been tested under specific circumstances which are are defined as the shopsystem's 
 * standard configuration (vendor's delivery state). The Customer is responsible for testing the plugin's 
 * functionality before putting it into production enviroment. The customer uses the the plugin 
 * at own risk. WDCEE does not guarantee it's full functionality neither does WDCEE assume liability 
 * for any disadvantage related to the use use of this plugin. 
 * By installing the plugin into the shopsystem the customer agrees to the terms of use. 
 * Please do not use this plugin if you do not agree to the terms of use !
 *
 * This script validates the parameters and fingerprint returned by Wirecard in order to prevent
 * fraud.
 *
 * @input Fingerprint : String 
 * @input FingerprintOrder : String
 * @input Parameters : dw.web.HttpParameterMap
 * @output CalculatedFP : String
 */
importPackage( dw.system );
importPackage( dw.crypto );
importPackage( dw.util );
importPackage( dw.web );

function execute( args : PipelineDictionary ) : Number
{
	var fingerprintSeed : String = "";
	var fingerprintOrder : String = args.FingerprintOrder;
	var fingerprint : String = args.Fingerprint;

	var fpArray : Array = fingerprintOrder.split(",");

	for each(var fpItem : String in fpArray) {
		fingerprintSeed += fpItem.equals("secret") ? Site.getCurrent().getCustomPreferenceValue("wirecardSecretString") : args.Parameters.get(fpItem);
	}

	var validationFingerprint : String =  
		Encoding.toHex(
			new MessageDigest(MessageDigest.DIGEST_MD5).digest(
				MessageDigest.DIGEST_MD5, 
				new Bytes(
					fingerprintSeed, "UTF-8" 
				)
			)
		);

	args.CalculatedFP = validationFingerprint;

	if(validationFingerprint.equals(fingerprint)) {
	    return PIPELET_NEXT;
	} else {
	    return PIPELET_ERROR;
	}
}
