/**
 * Shop System Plugins - Terms of use 
 * 
 * This terms of use regulates warranty and liability between Wirecard Central Eastern Europe 
 * (subsequently referred to as WDCEE) and it's contractual partners partners
 * (subsequently referred to as customer or customers) which are related to the use of plugins 
 * provided by WDCEE. The Plugin is provided provided by WDCEE free of charge for it's customers 
 * and must be used for the purpose of WDCEE's payment platform platform integration only. 
 * It explicitly is not part of the general contract between WDCEE and it's customer. The plugin 
 * has successfully been tested under specific circumstances which are are defined as the shopsystem's 
 * standard configuration (vendor's delivery state). The Customer is responsible for testing the plugin's 
 * functionality before putting it into production enviroment. The customer uses the the plugin 
 * at own risk. WDCEE does not guarantee it's full functionality neither does WDCEE assume liability 
 * for any disadvantage related to the use use of this plugin. 
 * By installing the plugin into the shopsystem the customer agrees to the terms of use. 
 * Please do not use this plugin if you do not agree to the terms of use !
 *
 * Checks if the basket is empty after the order was set to failed. If this is the case, the session
 * has most-likely be timed out, and the basket needs to be restored.
 *
 * @input Basket : dw.order.Basket - the old or a newly created basket
 * @input Order : dw.order.Order - the previously created, but failed order
 * @output RestoreBasket : String - value which indicates if the basket was restored
 */
importPackage( dw.system );
importPackage( dw.order );
importPackage( dw.util );

importScript("int_wirecard:wirecard/libLogger.ds");

function execute( args : PipelineDictionary ) : Number
{
	var basket : Basket = args.Basket;
	var order : Order = args.Order;
	
	// check if the basket is empty
	if (basket.productLineItems.size() == 0 && basket.giftCertificateLineItems.size() == 0) {
		
		WirecardLogger.logWarn("CheckSessionTimeout.ds: A session timeout has been detected for Order " + order.orderNo);
		args.RestoreBasket = "true";
	}
	else {
	
		args.RestoreBasket = "false";
	}
	
	return PIPELET_NEXT;
}