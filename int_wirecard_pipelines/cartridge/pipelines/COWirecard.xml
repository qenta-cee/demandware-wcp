<?xml version="1.0" encoding="UTF-8" ?>
<?demandware-pipeline version="2.0"?>

<pipeline type="view">
  <branch basename="_ANONYMOUS_BRANCH_1">
    <segment>
      <node>
        <text-node>
          <description>Shop System Plugins - Terms of use 

This terms of use regulates warranty and liability between Wirecard Central Eastern Europe (subsequently referred to as WDCEE) and it's contractual partners partners(subsequently referred to as customer or customers) which are related to the use of plugins provided by WDCEE. The Plugin is provided provided by WDCEE free of charge for it's customers and must be used for the purpose of WDCEE's payment platform platform integration only. It explicitly is not part of the general contract between WDCEE and it's customer. The plugin has successfully been tested under specific circumstances which are are defined as the shopsystem's standard configuration (vendor's delivery state). The Customer is responsible for testing the plugin's functionality before putting it into production enviroment. The customer uses the the plugin at own risk. WDCEE does not guarantee it's full functionality neither does WDCEE assume liability for any disadvantage related to the use use of this plugin. By installing the plugin into the shopsystem the customer agrees to the terms of use. Please do not use this plugin if you do not agree to the terms of use !</description>
        </text-node>
        <node-display height="5" width="2" x="0" y="0"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_2">
    <segment>
      <node>
        <text-node>
          <description>Collects and generates all parameters for the Wirecard post request.</description>
        </text-node>
        <node-display x="3" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Redirect">
    <segment>
      <node>
        <start-node call-mode="private" name="Redirect" secure="false"/>
        <node-display x="3" y="2"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="wirecard/GetWirecardCallParameters.ds"/>
          <key-binding alias="ScriptLog" key="ScriptLog"/>
          <key-binding alias="CurrentCustomer" key="Customer"/>
          <key-binding alias="Order" key="Order"/>
          <key-binding alias="WirecardParameters" key="WirecardParameters"/>
          <key-binding alias="WirecardUrl" key="WirecardUrl"/>
        </pipelet-node>
        <node-display x="0" y="2"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="2" y="0"/>
              <bend-point relative-to="target" x="0" y="-1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <jump-node start-name-ref="COPlaceOrder-FailImpl"/>
              <node-display x="1" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="false" name="wirecard/wirecardswitch"/>
        </interaction-node>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_4">
    <segment>
      <node>
        <text-node>
          <description>URL to show the wirecard template in an iframe.</description>
        </text-node>
        <node-display x="5" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="ShowInIFrame">
    <segment>
      <node>
        <start-node name="ShowInIFrame" secure="true"/>
        <node-display x="5" y="2"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-GetOrder"/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="wirecard/GetWirecardCallParameters.ds"/>
          <key-binding alias="ScriptLog" key="ScriptLog"/>
          <key-binding alias="CurrentCustomer" key="Customer"/>
          <key-binding alias="Order" key="Order"/>
          <key-binding alias="WirecardParameters" key="WirecardParameters"/>
          <key-binding alias="WirecardUrl" key="WirecardUrl"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="2" y="0"/>
              <bend-point relative-to="target" x="0" y="-1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <jump-node start-name-ref="COPlaceOrder-FailImpl"/>
              <node-display x="1" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="false" name="wirecard/wirecardforward"/>
        </interaction-node>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_6">
    <segment>
      <node>
        <text-node>
          <description>The Confirm URL is passed, if the transaction was properly carried out. The URL is called in the background with a 'server-to-server' request. Payment states could be CANCEL, SUCCESS or FAILURE</description>
        </text-node>
        <node-display width="2" x="8" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Confirm">
    <segment>
      <node>
        <start-node name="Confirm" secure="true"/>
        <node-display x="8" y="2"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node custom-name="Map Wirecard Response Parameters" pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <key-binding alias="&quot;confirm&quot;" key="From_0"/>
          <key-binding alias="WirecardResponseStatus" key="To_0"/>
          <key-binding alias="CurrentHttpParameterMap.DWROrderNo.value" key="From_1"/>
          <key-binding alias="OrderNo" key="To_1"/>
          <key-binding alias="CurrentHttpParameterMap.orderNumber.value" key="From_3"/>
          <key-binding alias="WirecardOrderNumber" key="To_3"/>
          <key-binding alias="CurrentHttpParameterMap.paymentType.value" key="From_4"/>
          <key-binding alias="WirecardPaymentType" key="To_4"/>
          <key-binding alias="CurrentHttpParameterMap.responseFingerprint.value" key="From_5"/>
          <key-binding alias="WirecardResponseFingerprint" key="To_5"/>
          <key-binding alias="CurrentHttpParameterMap.amount.value" key="From_2"/>
          <key-binding alias="WirecardAmount" key="To_2"/>
          <key-binding alias="PaymentMethodId" key="To_6"/>
          <key-binding alias="WirecardResponseFingerprintOrder" key="To_7"/>
          <key-binding alias="CurrentHttpParameterMap.DWRPaymentMethodId.value" key="From_6"/>
          <key-binding alias="CurrentHttpParameterMap.responseFingerprintOrder.value" key="From_7"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="wirecard/LogWirecardReturn.ds"/>
          <key-binding alias="null" key="ScriptLog"/>
          <key-binding alias="CurrentHttpParameterMap" key="Parameters"/>
          <key-binding alias="WirecardResponseStatus" key="WirecardResponseStatus"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in2" target-path="./+1">
            <transition-display>
              <bend-point relative-to="source" x="1" y="0"/>
              <bend-point relative-to="target" x="1" y="0"/>
            </transition-display>
          </transition>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="CurrentHttpParameterMap.paymentState.value == &quot;SUCCESS&quot;" condition-operator="expr"/>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="yes">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="target" x="0" y="-1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <call-node start-name-ref="COWirecard-CompletePayment"/>
              <node-display x="0" y="2"/>
              <branch basename="b2" source-connector="error">
                <transition target-connector="in1" target-path="../+1"/>
              </branch>
              <branch basename="b3" source-connector="order_created">
                <transition target-connector="in"/>
                <segment>
                  <node>
                    <interaction-node transaction-required="false">
                      <template buffered="true" dynamic="false" name="util/reporting/ReportOrder"/>
                    </interaction-node>
                    <node-display x="0" y="2"/>
                  </node>
                </segment>
              </branch>
            </node>
            <transition target-connector="in1" target-path="../+1"/>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="target" x="0" y="-2"/>
          <bend-point relative-to="target" x="0" y="-1"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="CurrentHttpParameterMap.paymentState.value == &quot;FAILURE&quot;" condition-operator="expr"/>
        <node-display x="2" y="1"/>
        <branch basename="b3" source-connector="yes">
          <transition target-connector="in"/>
          <segment>
            <node>
              <call-node start-name-ref="COWirecard-CompleteFailedPendingPayment"/>
              <node-display x="0" y="1"/>
            </node>
            <transition target-connector="in2" target-path="../+1"/>
          </segment>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1">
        <transition-display>
          <bend-point relative-to="source" x="1" y="0"/>
          <bend-point relative-to="target" x="1" y="0"/>
        </transition-display>
      </transition>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <interaction-node transaction-required="false">
          <template buffered="true" dynamic="false" name="wirecard/empty"/>
        </interaction-node>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_8">
    <segment>
      <node>
        <text-node>
          <description>The successURL is passed, if the transaction was properly carried out.</description>
        </text-node>
        <node-display width="2" x="14" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Success">
    <segment>
      <node>
        <start-node name="Success" secure="true"/>
        <node-display x="14" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node custom-name="Map Wirecard Response Parameters" pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <key-binding alias="&quot;success&quot;" key="From_0"/>
          <key-binding alias="WirecardResponseStatus" key="To_0"/>
          <key-binding alias="CurrentHttpParameterMap.responseFingerprintOrder.value" key="From_8"/>
          <key-binding alias="CurrentHttpParameterMap.DWRPaymentMethodId.value" key="From_7"/>
          <key-binding alias="CurrentHttpParameterMap.responseFingerprint.value" key="From_6"/>
          <key-binding alias="CurrentHttpParameterMap.paymentType.value" key="From_5"/>
          <key-binding alias="CurrentHttpParameterMap.orderNumber.value" key="From_4"/>
          <key-binding alias="CurrentHttpParameterMap.amount.value" key="From_3"/>
          <key-binding alias="CurrentHttpParameterMap.DWROrderNo.value" key="From_2"/>
          <key-binding alias="dw.web.URLUtils.https(&quot;COWirecard-Success&quot;).toString()" key="From_1"/>
          <key-binding alias="WirecardResponseFingerprintOrder" key="To_8"/>
          <key-binding alias="PaymentMethodId" key="To_7"/>
          <key-binding alias="WirecardResponseFingerprint" key="To_6"/>
          <key-binding alias="WirecardPaymentType" key="To_5"/>
          <key-binding alias="WirecardOrderNumber" key="To_4"/>
          <key-binding alias="WirecardAmount" key="To_3"/>
          <key-binding alias="OrderNo" key="To_2"/>
          <key-binding alias="WirecardResponseURL" key="To_1"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-CheckForIFrameResponse"/>
        <node-display x="0" y="1"/>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="wirecard/LogWirecardReturn.ds"/>
          <key-binding alias="null" key="ScriptLog"/>
          <key-binding alias="CurrentHttpParameterMap" key="Parameters"/>
          <key-binding alias="WirecardResponseStatus" key="WirecardResponseStatus"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in2" target-path="./+1">
            <transition-display>
              <bend-point relative-to="source" x="1" y="0"/>
              <bend-point relative-to="target" x="1" y="0"/>
            </transition-display>
          </transition>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-CompletePayment"/>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in"/>
          <segment>
            <node>
              <jump-node start-name-ref="COBilling-Start"/>
              <node-display x="0" y="3"/>
            </node>
          </segment>
        </branch>
        <branch basename="b3" source-connector="order_created">
          <transition target-connector="in1" target-path="./+1"/>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1">
        <transition-display>
          <bend-point relative-to="source" x="2" y="1"/>
        </transition-display>
      </transition>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="1" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <jump-node start-name-ref="COSummary-ShowConfirmation"/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_10">
    <segment>
      <node>
        <text-node>
          <description>The pendingURL is called when the payment is pending. We show complete the order in this case as well, and show the order confirmation page. Custom implementations need to decide if the order will be exported to a backend in this case or how the orders are handled in this case.</description>
        </text-node>
        <node-display width="2" x="17" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Pending">
    <segment>
      <node>
        <start-node name="Pending" secure="true"/>
        <node-display x="17" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node custom-name="Map Wirecard Response Parameters" pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <key-binding alias="&quot;pending&quot;" key="From_0"/>
          <key-binding alias="WirecardResponseStatus" key="To_0"/>
          <key-binding alias="WirecardResponseFingerprintOrder" key="To_8"/>
          <key-binding alias="PaymentMethodId" key="To_7"/>
          <key-binding alias="WirecardResponseFingerprint" key="To_6"/>
          <key-binding alias="WirecardPaymentType" key="To_5"/>
          <key-binding alias="WirecardOrderNumber" key="To_4"/>
          <key-binding alias="WirecardAmount" key="To_3"/>
          <key-binding alias="OrderNo" key="To_2"/>
          <key-binding alias="WirecardResponseURL" key="To_1"/>
          <key-binding alias="CurrentHttpParameterMap.responseFingerprintOrder.value" key="From_8"/>
          <key-binding alias="CurrentHttpParameterMap.DWRPaymentMethodId.value" key="From_7"/>
          <key-binding alias="CurrentHttpParameterMap.responseFingerprint.value" key="From_6"/>
          <key-binding alias="CurrentHttpParameterMap.paymentType.value" key="From_5"/>
          <key-binding alias="CurrentHttpParameterMap.orderNumber.value" key="From_4"/>
          <key-binding alias="CurrentHttpParameterMap.amount.value" key="From_3"/>
          <key-binding alias="CurrentHttpParameterMap.DWROrderNo.value" key="From_2"/>
          <key-binding alias="dw.web.URLUtils.https(&quot;COWirecard-Pending&quot;).toString()" key="From_1"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-CheckForIFrameResponse"/>
        <node-display x="0" y="1"/>
      </node>
      <transition target-connector="in3" target-path="/Success.2">
        <transition-display>
          <bend-point relative-to="source" x="0" y="2"/>
        </transition-display>
      </transition>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_12">
    <segment>
      <node>
        <text-node>
          <description>The FailureURL is passed, if the transaction failed at Wirecard. The order will be rolled back in this case.</description>
        </text-node>
        <node-display width="2" x="20" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_13">
    <segment>
      <node>
        <text-node>
          <description>The Cancel URL is passed, if the transaction was canceled by the customer at Wirecard. The order will be rolled back in this case.</description>
        </text-node>
        <node-display width="2" x="23" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Failure">
    <segment>
      <node>
        <start-node name="Failure" secure="true"/>
        <node-display x="20" y="2"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node custom-name="Map required parameters" pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <key-binding alias="&quot;failure&quot;" key="From_0"/>
          <key-binding alias="WirecardResponseStatus" key="To_0"/>
          <key-binding alias="dw.web.Resource.msg('checkout.wirecard.failure', 'wirecard', null)" key="From_2"/>
          <key-binding alias="CurrentRequest.custom.wirecardErrorMessage" key="To_2"/>
          <key-binding alias="null" key="From_3"/>
          <key-binding alias="null" key="To_3"/>
          <key-binding alias="null" key="From_4"/>
          <key-binding alias="null" key="To_4"/>
          <key-binding alias="null" key="From_5"/>
          <key-binding alias="null" key="To_5"/>
          <key-binding alias="null" key="From_6"/>
          <key-binding alias="null" key="To_6"/>
          <key-binding alias="null" key="From_7"/>
          <key-binding alias="null" key="To_7"/>
          <key-binding alias="null" key="From_8"/>
          <key-binding alias="null" key="To_8"/>
          <key-binding alias="null" key="From_9"/>
          <key-binding alias="null" key="To_9"/>
          <key-binding alias="dw.web.URLUtils.https(&quot;COWirecard-Failure&quot;).toString()" key="From_1"/>
          <key-binding alias="WirecardResponseURL" key="To_1"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-CheckForIFrameResponse"/>
        <node-display x="0" y="1"/>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="wirecard/LogWirecardReturn.ds"/>
          <key-binding alias="null" key="ScriptLog"/>
          <key-binding alias="CurrentHttpParameterMap" key="Parameters"/>
          <key-binding alias="WirecardResponseStatus" key="WirecardResponseStatus"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in2" target-path="./+1">
            <transition-display>
              <bend-point relative-to="source" x="1" y="0"/>
              <bend-point relative-to="target" x="1" y="0"/>
            </transition-display>
          </transition>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-ResetOrder"/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <jump-node start-name-ref="COBilling-Start"/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Cancel">
    <segment>
      <node>
        <start-node name="Cancel" secure="true"/>
        <node-display x="23" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node custom-name="Map required parameters" pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <key-binding alias="&quot;cancel&quot;" key="From_0"/>
          <key-binding alias="WirecardResponseStatus" key="To_0"/>
          <key-binding alias="dw.web.Resource.msg('checkout.wirecard.cancel', 'wirecard', null)" key="From_2"/>
          <key-binding alias="CurrentRequest.custom.wirecardErrorMessage" key="To_2"/>
          <key-binding alias="null" key="From_3"/>
          <key-binding alias="null" key="To_3"/>
          <key-binding alias="null" key="From_4"/>
          <key-binding alias="null" key="To_4"/>
          <key-binding alias="null" key="From_5"/>
          <key-binding alias="null" key="To_5"/>
          <key-binding alias="null" key="From_6"/>
          <key-binding alias="null" key="To_6"/>
          <key-binding alias="null" key="From_7"/>
          <key-binding alias="null" key="To_7"/>
          <key-binding alias="null" key="From_8"/>
          <key-binding alias="null" key="To_8"/>
          <key-binding alias="null" key="From_9"/>
          <key-binding alias="null" key="To_9"/>
          <key-binding alias="dw.web.URLUtils.https(&quot;COWirecard-Cancel&quot;).toString()" key="From_1"/>
          <key-binding alias="WirecardResponseURL" key="To_1"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-CheckForIFrameResponse"/>
        <node-display x="0" y="1"/>
      </node>
      <transition target-connector="in1" target-path="/Failure.2">
        <transition-display>
          <bend-point relative-to="source" x="0" y="2"/>
        </transition-display>
      </transition>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_16">
    <segment>
      <node>
        <text-node>
          <description>The Service URL is a link behind the logo of the web shop. This link should be used to link to a Service Page (Content Asset) to display more details about the payment methods. In the standard plugin, the content asset 'payment' is called, but this could be changed easily according to your needs.</description>
        </text-node>
        <node-display width="2" x="26" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="Service">
    <segment>
      <node>
        <start-node name="Service" secure="false"/>
        <node-display x="26" y="2"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node custom-name="Assign service page content asset" pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <key-binding alias="&quot;service&quot;" key="From_0"/>
          <key-binding alias="WirecardResponseStatus" key="To_0"/>
          <key-binding alias="&quot;payment&quot;" key="From_2"/>
          <key-binding alias="cid" key="To_2"/>
          <key-binding alias="null" key="From_3"/>
          <key-binding alias="null" key="To_3"/>
          <key-binding alias="null" key="From_4"/>
          <key-binding alias="null" key="To_4"/>
          <key-binding alias="null" key="From_5"/>
          <key-binding alias="null" key="To_5"/>
          <key-binding alias="null" key="From_6"/>
          <key-binding alias="null" key="To_6"/>
          <key-binding alias="null" key="From_7"/>
          <key-binding alias="null" key="To_7"/>
          <key-binding alias="null" key="From_8"/>
          <key-binding alias="null" key="To_8"/>
          <key-binding alias="null" key="From_9"/>
          <key-binding alias="null" key="To_9"/>
          <key-binding alias="dw.web.URLUtils.http(&quot;COWirecard-Service&quot;).toString()" key="From_1"/>
          <key-binding alias="WirecardResponseURL" key="To_1"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-CheckForIFrameResponse"/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-ResetOrder"/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <jump-node start-name-ref="Page-Show"/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_18">
    <segment>
      <node>
        <text-node>
          <description>Checks the Wirecard response and if the originally passed amount is the order value. Furthermore, the fingerprint passed by Wirecard is checked in order to avoid fraud.</description>
        </text-node>
        <node-display width="2" x="3" y="14"/>
      </node>
    </segment>
  </branch>
  <branch basename="ValidateWirecardResponse">
    <segment>
      <node>
        <start-node call-mode="private" name="ValidateWirecardResponse" secure="false"/>
        <node-display x="3" y="15"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="wirecard/ValidateWirecardAmountAndFingerprint.ds"/>
          <key-binding alias="ScriptLog" key="ScriptLog"/>
          <key-binding alias="WirecardResponseFingerprint" key="Fingerprint"/>
          <key-binding alias="WirecardResponseFingerprintOrder" key="FingerprintOrder"/>
          <key-binding alias="CurrentHttpParameterMap" key="Parameters"/>
          <key-binding alias="Order" key="Order"/>
          <key-binding alias="WirecardAmount" key="WirecardAmount"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in1"/>
          <segment>
            <node>
              <join-node/>
              <node-display x="1" y="0"/>
            </node>
            <simple-transition/>
            <node>
              <end-node name="error"/>
              <node-display x="0" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition/>
      <node>
        <end-node/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_20">
    <segment>
      <node>
        <text-node>
          <description>Gets the order using the originally passed and now returned DWROrderNo</description>
        </text-node>
        <node-display x="7" y="14"/>
      </node>
    </segment>
  </branch>
  <branch basename="GetOrder">
    <segment>
      <node>
        <start-node call-mode="private" name="GetOrder" secure="false"/>
        <node-display x="7" y="15"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="GetOrder" pipelet-set-identifier="bc_api">
          <key-binding alias="CurrentHttpParameterMap.DWROrderNo.value" key="OrderNo"/>
          <key-binding alias="Order" key="Order"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in2" target-path="./+1">
            <transition-display>
              <bend-point relative-to="source" x="2" y="0"/>
            </transition-display>
          </transition>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="Order.customerEmail === CurrentHttpParameterMap.DWREmail.stringValue &amp;&amp; Order.billingAddress.postalCode === CurrentHttpParameterMap.DWRPostalCode.stringValue" condition-operator="expr"/>
        <node-display x="0" y="1"/>
        <branch basename="b3" source-connector="yes">
          <transition target-connector="in"/>
          <segment>
            <node>
              <end-node/>
              <node-display x="0" y="2"/>
            </node>
          </segment>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="1" y="0"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <key-binding alias="Order" key="To_0"/>
          <key-binding alias="false" key="From_0"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <jump-node start-name-ref="Error-Forbidden"/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_22">
    <segment>
      <node>
        <text-node>
          <description>Resets the order and restores the basket of the customer.</description>
        </text-node>
        <node-display x="9" y="14"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_23">
    <segment>
      <node>
        <text-node>
          <description>Checks for a session timeout and restores the basket in this case using the values of the failed order.</description>
        </text-node>
        <node-display x="11" y="14"/>
      </node>
    </segment>
  </branch>
  <branch basename="ResetOrder">
    <segment>
      <node>
        <start-node call-mode="private" name="ResetOrder" secure="false"/>
        <node-display x="9" y="15"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-GetOrder"/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="FailOrder" pipelet-set-identifier="bc_api">
          <key-binding alias="Order" key="Order"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in2" target-path="./+1">
            <transition-display>
              <bend-point relative-to="source" x="1" y="0"/>
              <bend-point relative-to="target" x="1" y="0"/>
            </transition-display>
          </transition>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-CheckAndRestoreBasket"/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <end-node/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="CheckAndRestoreBasket">
    <segment>
      <node>
        <start-node call-mode="private" name="CheckAndRestoreBasket" secure="false"/>
        <node-display x="11" y="15"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="GetBasket" pipelet-set-identifier="bc_api">
          <config-property key="Create" value="true"/>
          <key-binding alias="Basket" key="Basket"/>
          <key-binding alias="null" key="StoredBasket"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in1" target-path="./b3.1">
            <transition-display>
              <bend-point relative-to="source" x="2" y="0"/>
            </transition-display>
          </transition>
        </branch>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="wirecard/CheckSessionTimeout.ds"/>
          <key-binding alias="null" key="ScriptLog"/>
          <key-binding alias="Basket" key="Basket"/>
          <key-binding alias="Order" key="Order"/>
          <key-binding alias="RestoreBasket" key="RestoreBasket"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b3" source-connector="error">
          <transition target-connector="in2"/>
          <segment>
            <node>
              <join-node/>
              <node-display x="1" y="0"/>
            </node>
            <transition target-connector="in2" target-path="../+1"/>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="RestoreBasket == &quot;true&quot;" condition-operator="expr"/>
        <node-display x="0" y="1"/>
        <branch basename="b4" source-connector="yes">
          <transition target-connector="in"/>
          <segment>
            <node>
              <pipelet-node pipelet-name="Assign" pipelet-set-identifier="bc_api">
                <config-property key="Transactional" value="false"/>
                <key-binding alias="null" key="From_3"/>
                <key-binding alias="null" key="To_3"/>
                <key-binding alias="null" key="From_4"/>
                <key-binding alias="null" key="To_4"/>
                <key-binding alias="null" key="From_5"/>
                <key-binding alias="null" key="To_5"/>
                <key-binding alias="null" key="From_6"/>
                <key-binding alias="null" key="To_6"/>
                <key-binding alias="null" key="From_7"/>
                <key-binding alias="null" key="To_7"/>
                <key-binding alias="null" key="From_8"/>
                <key-binding alias="null" key="To_8"/>
                <key-binding alias="null" key="From_9"/>
                <key-binding alias="null" key="To_9"/>
                <key-binding alias="dw.web.Resource.msg('checkout.wirecard.sessiontimeout', 'wirecard', null)" key="From_0"/>
                <key-binding alias="CurrentRequest.custom.wirecardSessionTimeoutMessage" key="To_0"/>
              </pipelet-node>
              <node-display x="0" y="1"/>
            </node>
            <simple-transition/>
            <node>
              <pipelet-node pipelet-name="CreateBillingAddress" pipelet-set-identifier="bc_api">
                <key-binding alias="Basket" key="Basket"/>
                <key-binding alias="null" key="Address"/>
              </pipelet-node>
              <node-display x="0" y="1"/>
            </node>
            <simple-transition/>
            <node>
              <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
                <config-property key="Transactional" value="true"/>
                <config-property key="OnError" value="PIPELET_ERROR"/>
                <config-property key="ScriptFile" value="wirecard/RestoreBasket.ds"/>
                <key-binding alias="null" key="ScriptLog"/>
                <key-binding alias="Basket" key="Basket"/>
                <key-binding alias="Order" key="Order"/>
              </pipelet-node>
              <node-display x="0" y="1"/>
              <branch basename="b2" source-connector="error">
                <transition target-connector="in2" target-path="./+1">
                  <transition-display>
                    <bend-point relative-to="source" x="1" y="0"/>
                    <bend-point relative-to="target" x="1" y="0"/>
                  </transition-display>
                </transition>
              </branch>
            </node>
            <transition target-connector="in1" target-path="./+1"/>
          </segment>
          <segment>
            <node>
              <join-node/>
              <node-display x="0" y="1"/>
            </node>
            <transition target-connector="in" target-path="./+1">
              <transition-display>
                <bend-point relative-to="source" x="0" y="1"/>
              </transition-display>
            </transition>
          </segment>
          <segment>
            <node>
              <loop-node element-key="GCLineItem" iterator-key="Order.giftCertificateLineItems"/>
              <node-display x="0" y="1"/>
              <branch basename="b2" source-connector="do">
                <transition target-connector="in">
                  <transition-display>
                    <bend-point relative-to="source" x="0" y="1"/>
                  </transition-display>
                </transition>
                <segment>
                  <node>
                    <pipelet-node pipelet-name="AddGiftCertificateToBasket" pipelet-set-identifier="bc_api">
                      <key-binding alias="null" key="GiftCertificateLineItem"/>
                      <key-binding alias="GCLineItem.priceValue" key="Amount"/>
                      <key-binding alias="Basket" key="Basket"/>
                      <key-binding alias="GCLineItem.recipientEmail" key="RecipientEmail"/>
                      <key-binding alias="GCLineItem.recipientName" key="RecipientName"/>
                      <key-binding alias="GCLineItem.senderName" key="SenderName"/>
                      <key-binding alias="GCLineItem.message" key="Message"/>
                      <key-binding alias="GCLineItem.productListItem" key="ProductListItem"/>
                    </pipelet-node>
                    <node-display x="0" y="1"/>
                    <branch basename="b2" source-connector="error">
                      <transition target-connector="in1" target-path="./+1">
                        <transition-display>
                          <bend-point relative-to="source" x="1" y="0"/>
                          <bend-point relative-to="target" x="1" y="0"/>
                        </transition-display>
                      </transition>
                    </branch>
                  </node>
                  <transition target-connector="in1" target-path="./+1"/>
                </segment>
                <segment>
                  <node>
                    <join-node/>
                    <node-display x="0" y="1"/>
                  </node>
                  <transition target-connector="loop" target-path="..">
                    <transition-display>
                      <bend-point relative-to="source" x="-1" y="0"/>
                      <bend-point relative-to="target" x="-1" y="0"/>
                    </transition-display>
                  </transition>
                </segment>
              </branch>
            </node>
            <transition target-connector="in1" target-path="../+2"/>
          </segment>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="1" y="0"/>
      </node>
      <transition target-connector="in2" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="5"/>
      </node>
      <simple-transition/>
      <node>
        <end-node/>
        <node-display x="0" y="2"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_26">
    <segment>
      <node>
        <text-node>
          <description>Sets all necessary parameters and attributes to the payment of the order.</description>
        </text-node>
        <node-display x="13" y="14"/>
      </node>
    </segment>
  </branch>
  <branch basename="SetPaymentParameters">
    <segment>
      <node>
        <start-node call-mode="private" name="SetPaymentParameters" secure="false"/>
        <node-display x="13" y="15"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <pipelet-node pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="true"/>
          <key-binding alias="null" key="From_7"/>
          <key-binding alias="null" key="To_7"/>
          <key-binding alias="null" key="From_8"/>
          <key-binding alias="null" key="To_8"/>
          <key-binding alias="null" key="From_9"/>
          <key-binding alias="null" key="To_9"/>
          <key-binding alias="WirecardOrderNumber" key="From_0"/>
          <key-binding alias="PaymentInstrument.paymentTransaction.transactionID" key="To_0"/>
          <key-binding alias="PaymentInstrument.paymentTransaction.paymentProcessor" key="To_1"/>
          <key-binding alias="PaymentProcessor" key="From_1"/>
          <key-binding alias="Order.custom.wirecardOrderNo" key="To_2"/>
          <key-binding alias="WirecardOrderNumber" key="From_2"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="true"/>
          <config-property key="OnError" value="PIPELET_ERROR"/>
          <config-property key="ScriptFile" value="wirecard/SetWirecardPaymentParameters.ds"/>
          <key-binding alias="null" key="ScriptLog"/>
          <key-binding alias="CurrentHttpParameterMap" key="Parameters"/>
          <key-binding alias="PaymentInstrument" key="PaymentInstrument"/>
          <key-binding alias="Order" key="Order"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="error">
          <transition target-connector="in2" target-path="./+1">
            <transition-display>
              <bend-point relative-to="source" x="1" y="0"/>
              <bend-point relative-to="target" x="1" y="0"/>
            </transition-display>
          </transition>
        </branch>
      </node>
      <transition target-connector="in1" target-path="./+1"/>
    </segment>
    <segment>
      <node>
        <join-node/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <end-node/>
        <node-display x="0" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_28">
    <segment>
      <node>
        <text-node>
          <description>Completes the aynchronous payment for the confirm and success url. After the storage of all payment parameters is done, the SiteGenesis standard pipeline will be called to finish the order.</description>
        </text-node>
        <node-display width="2" x="16" y="14"/>
      </node>
    </segment>
  </branch>
  <branch basename="CompletePayment">
    <segment>
      <node>
        <start-node call-mode="private" name="CompletePayment" secure="false"/>
        <node-display x="16" y="15"/>
      </node>
      <simple-transition/>
      <node>
        <call-node start-name-ref="COWirecard-GetOrder"/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <decision-node condition-key="!empty(Order) &amp;&amp; Order.status.value == dw.order.Order.ORDER_STATUS_CREATED" condition-operator="expr"/>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="yes">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="0" y="1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <call-node start-name-ref="COWirecard-ValidateWirecardResponse"/>
              <node-display x="0" y="1"/>
              <branch basename="b2" source-connector="error">
                <transition target-connector="in">
                  <transition-display>
                    <bend-point relative-to="target" x="0" y="-2"/>
                  </transition-display>
                </transition>
                <segment>
                  <node>
                    <decision-node condition-key="WirecardResponseStatus == &quot;success&quot;" condition-operator="expr"/>
                    <node-display x="2" y="2"/>
                    <branch basename="b2" source-connector="yes">
                      <transition target-connector="in"/>
                      <segment>
                        <node>
                          <pipelet-node pipelet-name="Assign" pipelet-set-identifier="bc_api">
                            <config-property key="Transactional" value="false"/>
                            <key-binding alias="CurrentRequest.custom.wirecardErrorMessage" key="To_0"/>
                            <key-binding alias="null" key="From_1"/>
                            <key-binding alias="null" key="To_1"/>
                            <key-binding alias="null" key="From_2"/>
                            <key-binding alias="null" key="To_2"/>
                            <key-binding alias="null" key="From_3"/>
                            <key-binding alias="null" key="To_3"/>
                            <key-binding alias="null" key="From_4"/>
                            <key-binding alias="null" key="To_4"/>
                            <key-binding alias="null" key="From_5"/>
                            <key-binding alias="null" key="To_5"/>
                            <key-binding alias="null" key="From_6"/>
                            <key-binding alias="null" key="To_6"/>
                            <key-binding alias="null" key="From_7"/>
                            <key-binding alias="null" key="To_7"/>
                            <key-binding alias="null" key="From_8"/>
                            <key-binding alias="null" key="To_8"/>
                            <key-binding alias="null" key="From_9"/>
                            <key-binding alias="null" key="To_9"/>
                            <key-binding alias="dw.web.Resource.msg('checkout.wirecard.error', 'wirecard', null)" key="From_0"/>
                          </pipelet-node>
                          <node-display x="0" y="1"/>
                        </node>
                        <simple-transition/>
                        <node>
                          <pipelet-node pipelet-name="FailOrder" pipelet-set-identifier="bc_api">
                            <key-binding alias="Order" key="Order"/>
                          </pipelet-node>
                          <node-display x="0" y="1"/>
                          <branch basename="b2" source-connector="error">
                            <transition target-connector="in2" target-path="../+1">
                              <transition-display>
                                <bend-point relative-to="source" x="1" y="0"/>
                                <bend-point relative-to="target" x="1" y="0"/>
                              </transition-display>
                            </transition>
                          </branch>
                        </node>
                        <transition target-connector="in1" target-path="../+1"/>
                      </segment>
                    </branch>
                  </node>
                  <transition target-connector="in1" target-path="./+1">
                    <transition-display>
                      <bend-point relative-to="source" x="2" y="0"/>
                      <bend-point relative-to="target" x="2" y="0"/>
                    </transition-display>
                  </transition>
                </segment>
                <segment>
                  <node>
                    <join-node/>
                    <node-display x="0" y="3"/>
                  </node>
                  <transition target-connector="in1" target-path="../+1/b2.1"/>
                </segment>
              </branch>
            </node>
            <simple-transition transaction-control="begin"/>
            <node>
              <pipelet-node custom-name="Payment Completion Pipeline Assignment" pipelet-name="Assign" pipelet-set-identifier="bc_api">
                <config-property key="Transactional" value="false"/>
                <key-binding alias="CompletePipeline + '-Complete'" key="From_2"/>
                <key-binding alias="CompletePipelineAction" key="To_2"/>
                <key-binding alias="null" key="From_3"/>
                <key-binding alias="null" key="To_3"/>
                <key-binding alias="null" key="From_4"/>
                <key-binding alias="null" key="To_4"/>
                <key-binding alias="null" key="From_5"/>
                <key-binding alias="null" key="To_5"/>
                <key-binding alias="null" key="From_6"/>
                <key-binding alias="null" key="To_6"/>
                <key-binding alias="null" key="From_7"/>
                <key-binding alias="null" key="To_7"/>
                <key-binding alias="null" key="From_8"/>
                <key-binding alias="null" key="To_8"/>
                <key-binding alias="null" key="From_9"/>
                <key-binding alias="null" key="To_9"/>
                <key-binding alias="Order.getPaymentInstruments(PaymentMethodId)[0]" key="From_0"/>
                <key-binding alias="dw.order.PaymentMgr.getPaymentMethod(PaymentMethodId).paymentProcessor.ID" key="From_1"/>
                <key-binding alias="CompletePipeline" key="To_1"/>
                <key-binding alias="PaymentInstrument" key="To_0"/>
              </pipelet-node>
              <node-display x="0" y="1"/>
            </node>
            <simple-transition>
              <transition-display>
                <bend-point relative-to="source" x="0" y="1"/>
              </transition-display>
            </simple-transition>
            <node>
              <call-node start-name-key="CompletePipelineAction"/>
              <node-display x="0" y="1"/>
            </node>
            <simple-transition/>
            <node>
              <pipelet-node pipelet-name="Script" pipelet-set-identifier="bc_api">
                <config-property key="Transactional" value="true"/>
                <config-property key="OnError" value="PIPELET_ERROR"/>
                <config-property key="ScriptFile" value="wirecard/SetOrderPaymentStatus.ds"/>
                <key-binding alias="null" key="ScriptLog"/>
                <key-binding alias="Order" key="Order"/>
                <key-binding alias="WirecardResponseStatus" key="WirecardResponseStatus"/>
                <key-binding alias="CurrentHttpParameterMap" key="Parameters"/>
              </pipelet-node>
              <node-display x="0" y="1"/>
              <branch basename="b3" source-connector="error">
                <transition target-connector="in2" target-path="./+1">
                  <transition-display>
                    <bend-point relative-to="source" x="1" y="0"/>
                    <bend-point relative-to="target" x="1" y="0"/>
                  </transition-display>
                </transition>
              </branch>
            </node>
            <transition target-connector="in1" target-path="./+1"/>
          </segment>
          <segment>
            <node>
              <join-node/>
              <node-display x="0" y="1"/>
            </node>
            <simple-transition>
              <transition-display>
                <bend-point relative-to="source" x="0" y="1"/>
              </transition-display>
            </simple-transition>
            <node>
              <call-node start-name-ref="COPlaceOrder-SubmitImpl"/>
              <node-display x="0" y="1"/>
              <branch basename="b2" source-connector="error">
                <transition target-connector="in1" transaction-control="commit"/>
                <segment>
                  <node>
                    <join-node/>
                    <node-display x="2" y="1"/>
                  </node>
                  <simple-transition/>
                  <node>
                    <end-node name="error"/>
                    <node-display x="0" y="1"/>
                  </node>
                </segment>
              </branch>
              <branch basename="b3" source-connector="order_created">
                <transition target-connector="in" transaction-control="commit">
                  <transition-display>
                    <bend-point relative-to="target" x="0" y="-1"/>
                  </transition-display>
                </transition>
                <segment>
                  <node>
                    <end-node name="order_created"/>
                    <node-display x="0" y="2"/>
                  </node>
                </segment>
              </branch>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="target" x="0" y="-2"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="!empty(Order) &amp;&amp; Order.status.value == dw.order.Order.ORDER_STATUS_FAILED" condition-operator="expr"/>
        <node-display x="3" y="1"/>
        <branch basename="b3" source-connector="yes">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="0" y="1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <end-node name="error"/>
              <node-display x="0" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="2" y="0"/>
          <bend-point relative-to="target" x="0" y="-1"/>
        </transition-display>
      </simple-transition>
      <node>
        <end-node/>
        <node-display x="1" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_30">
    <segment>
      <node>
        <text-node>
          <description>Completes a failed payment if the payment state was PENDING.</description>
        </text-node>
        <node-display x="22" y="14"/>
      </node>
    </segment>
  </branch>
  <branch basename="CompleteFailedPendingPayment">
    <segment>
      <node>
        <start-node call-mode="private" name="CompleteFailedPendingPayment" secure="false"/>
        <node-display x="22" y="15"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <call-node start-name-ref="COWirecard-GetOrder"/>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition/>
      <node>
        <pipelet-node custom-name="Assign payment transaction" pipelet-name="Assign" pipelet-set-identifier="bc_api">
          <config-property key="Transactional" value="false"/>
          <key-binding alias="null" key="From_3"/>
          <key-binding alias="null" key="To_3"/>
          <key-binding alias="null" key="From_4"/>
          <key-binding alias="null" key="To_4"/>
          <key-binding alias="null" key="From_5"/>
          <key-binding alias="null" key="To_5"/>
          <key-binding alias="null" key="From_6"/>
          <key-binding alias="null" key="To_6"/>
          <key-binding alias="null" key="From_7"/>
          <key-binding alias="null" key="To_7"/>
          <key-binding alias="null" key="From_8"/>
          <key-binding alias="null" key="To_8"/>
          <key-binding alias="null" key="From_9"/>
          <key-binding alias="null" key="To_9"/>
          <key-binding alias="Order.getPaymentInstruments(PaymentMethodId)[0]" key="From_0"/>
          <key-binding alias="PaymentInstrument" key="To_0"/>
        </pipelet-node>
        <node-display x="0" y="1"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="PaymentInstrument.paymentTransaction.custom.wirecardPaymentState == &quot;PENDING&quot;" condition-operator="expr"/>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="yes">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="0" y="1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <pipelet-node custom-name="Overwrite Wirecard payment state" pipelet-name="Assign" pipelet-set-identifier="bc_api">
                <config-property key="Transactional" value="true"/>
                <key-binding alias="null" key="From_3"/>
                <key-binding alias="null" key="To_3"/>
                <key-binding alias="null" key="From_4"/>
                <key-binding alias="null" key="To_4"/>
                <key-binding alias="null" key="From_5"/>
                <key-binding alias="null" key="To_5"/>
                <key-binding alias="null" key="From_6"/>
                <key-binding alias="null" key="To_6"/>
                <key-binding alias="null" key="From_7"/>
                <key-binding alias="null" key="To_7"/>
                <key-binding alias="null" key="From_8"/>
                <key-binding alias="null" key="To_8"/>
                <key-binding alias="null" key="From_9"/>
                <key-binding alias="null" key="To_9"/>
                <key-binding alias="PaymentInstrument.paymentTransaction.custom.wirecardPaymentState" key="To_0"/>
                <key-binding alias="CurrentHttpParameterMap.paymentState.submitted ? CurrentHttpParameterMap.paymentState.value : &quot;&quot;" key="From_0"/>
              </pipelet-node>
              <node-display x="0" y="1"/>
            </node>
            <simple-transition>
              <transition-display>
                <bend-point relative-to="source" x="0" y="1"/>
              </transition-display>
            </simple-transition>
            <node>
              <end-node/>
              <node-display x="0" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="2" y="0"/>
          <bend-point relative-to="target" x="0" y="-1"/>
        </transition-display>
      </simple-transition>
      <node>
        <end-node/>
        <node-display x="1" y="2"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_32">
    <segment>
      <node>
        <text-node>
          <description>This pipeline checks if the Wirecard page was opened in an iFrame. If yes, the parameters will be send to another template in the iFrame, and submitted again into the _top window. The same URL as before is called then, and but an additional parameter ResponseIFrame is send with that to ignore the logic in a second step.</description>
        </text-node>
        <node-display width="2" x="25" y="14"/>
      </node>
    </segment>
  </branch>
  <branch basename="CheckForIFrameResponse">
    <segment>
      <node>
        <start-node call-mode="private" name="CheckForIFrameResponse" secure="false"/>
        <node-display x="25" y="15"/>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="source" x="0" y="1"/>
        </transition-display>
      </simple-transition>
      <node>
        <decision-node condition-key="dw.system.Site.getCurrent().getCustomPreferenceValue(&quot;wirecardRedirectConfig&quot;).value == &quot;IFRAME&quot; &amp;&amp; !CurrentHttpParameterMap.ResponseIFrame.submitted" condition-operator="expr"/>
        <node-display x="0" y="1"/>
        <branch basename="b2" source-connector="yes">
          <transition target-connector="in">
            <transition-display>
              <bend-point relative-to="source" x="0" y="1"/>
            </transition-display>
          </transition>
          <segment>
            <node>
              <interaction-node transaction-required="false">
                <template buffered="true" dynamic="false" name="wirecard/wirecardresponse"/>
              </interaction-node>
              <node-display x="0" y="1"/>
            </node>
          </segment>
        </branch>
      </node>
      <simple-transition>
        <transition-display>
          <bend-point relative-to="target" x="0" y="-2"/>
        </transition-display>
      </simple-transition>
      <node>
        <end-node/>
        <node-display x="2" y="1"/>
      </node>
    </segment>
  </branch>
  <branch basename="_ANONYMOUS_BRANCH_34">
    <segment>
      <node>
        <text-node>
          <description>Additional Security check for order access.</description>
        </text-node>
        <node-display x="6" y="17"/>
      </node>
    </segment>
  </branch>
</pipeline>
