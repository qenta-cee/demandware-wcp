/**
 * Shop System Plugins - Terms of use 
 * 
 * This terms of use regulates warranty and liability between Wirecard Central Eastern Europe 
 * (subsequently referred to as WDCEE) and it's contractual partners partners
 * (subsequently referred to as customer or customers) which are related to the use of plugins 
 * provided by WDCEE. The Plugin is provided provided by WDCEE free of charge for it's customers 
 * and must be used for the purpose of WDCEE's payment platform platform integration only. 
 * It explicitly is not part of the general contract between WDCEE and it's customer. The plugin 
 * has successfully been tested under specific circumstances which are are defined as the shopsystem's 
 * standard configuration (vendor's delivery state). The Customer is responsible for testing the plugin's 
 * functionality before putting it into production enviroment. The customer uses the the plugin 
 * at own risk. WDCEE does not guarantee it's full functionality neither does WDCEE assume liability 
 * for any disadvantage related to the use use of this plugin. 
 * By installing the plugin into the shopsystem the customer agrees to the terms of use. 
 * Please do not use this plugin if you do not agree to the terms of use !
 *
 * This script provides utility functions shared across other checkout scripts.
 * Reused script components for checkout should be contained here, while this
 * script is imported into the requiring script.
 *
 * NOTE: The script is basically copied from SiteGenesis, but function removeExistingPaymentInstruments
 * has been fixed to remove all existing non-giftcertificate payment instruments from the basket.
 */
importPackage( dw.customer );
importPackage( dw.order );
importPackage( dw.system );
importPackage( dw.util );
importPackage( dw.value );

/**
 * Calculates the amount to be payed by a non-gift certificate payment instrument based 
 * on the given basket. The method subtracts the amount of all redeemed gift certificates 
 * from the order total and returns this value.
 *
 * PJP-2000: Modified logic to use LineItemCtnr (to support both Basket and Order)
 */
function calculateNonGiftCertificateAmount( lineItemCtnr : LineItemCtnr ) 
{
	// the total redemption amount of all gift certificate payment instruments in the basket
	var giftCertTotal : Money = new Money( 0.0, lineItemCtnr.currencyCode );

	// get the list of all gift certificate payment instruments 
	var gcPaymentInstrs : Collection = lineItemCtnr.getGiftCertificatePaymentInstruments();
	var iter : Iterator = gcPaymentInstrs.iterator();
	var orderPI : OrderPaymentInstrument = null;

	// sum the total redemption amount
	while( iter.hasNext() )
	{
		orderPI = iter.next();
		giftCertTotal = giftCertTotal.add( orderPI.getPaymentTransaction().getAmount() );
	}

	// get the order total
	var orderTotal : Money = lineItemCtnr.totalGrossPrice;

	// calculate the amount to charge for the payment instrument
	// this is the remaining open order total which has to be paid
	var amountOpen : Money = orderTotal.subtract( giftCertTotal );

	// return the open amount
	return amountOpen;
}

/** 
 * Determines if the basket already contains payment 
 * instruments which are no gift certificates and removes them from the basket.
 */
function removeExistingPaymentInstruments( lineItemCtnr : LineItemCtnr )
{
	// get all payment instruments
	var paymentInstrs : Collection = lineItemCtnr.getPaymentInstruments();
	var iter : Iterator = paymentInstrs.iterator();
	var existingPI : OrderPaymentInstrument = null;

	// remove them
	while( iter.hasNext() )
	{
		existingPI = iter.next();
		if (existingPI.paymentMethod != PaymentInstrument.METHOD_GIFT_CERTIFICATE) {
			lineItemCtnr.removePaymentInstrument( existingPI );
		}
	}
}